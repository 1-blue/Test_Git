포인터
이중포인터
배열과 포인터 관계
포인터와 구조체
자기참조구체 : 멤버중에 자기자신을 가르키는 포인터가 한 개 이상 존재하는 구조체
정적메모리할당
동적메모리할당
연결리스트
Linked Representation특징
1. 데이터를 한곳에 모아두지않음
2. 데이터들이 메인메모리상 어디에나 흩어져서 존재
3. 각데이터가 다음데이터를 가르키는 link를 가짐
4. 첫데이터만알면 모든데이터에 접근가능
단순연결리스트, 원형연결리스트, 이중연결리스트
===========================================================
stack, Queue, Deque
공통점 : 선형 자료구조, 항목 중간에 삽입 삭제불가
리스트 - 자료구조에서 특정한 자료의 구조
연결리스트 - 자료구조를 표현하는 프로그래밍 기법
헤드포인터, 헤드노드 사용이유 : 삽입과 삭제연산에서 맨처음노드의 처리가 까다로워서
원형연결리스트
이중연결리스트
===========================================================
순환 : 알고리즘이나 함수에서 자기자신을 다시 호출해서 문제를 해결하는 방법
재귀호출, 분할정복 : 같은모양이지만 크기를 최소한으로 만들어서 그만큼 반복호출하는것
순환예) 팩토리얼, 피보나치수열, 이항계수, 하노이탑, 이진탐색, 영역채색
순환과 반복
장점 : 간결성, 명확성 | 수행속도
단점 : 함수호출의 오버헤드(시간증가, 메모리필요) | 구현의 어려움
대부분의 순환은 반복으로 바꿔서 작성가능
시간복잡도측면에서
순환 : O(logn)
반복 : O(n)
===========================================================
트리 : 계층적인 구조를 나타내는 자료구조 (부모-자식 관계가 있음)
노드 : 트리의 구성요소
루트 : 부모가 없는 노드 (최상위노드)
서브트리 : 하나의 노드와 자손들로 이루어진 트리
단말노드 : 자식이 없는 노드 (최하위노드)
비단말노드 : 자식을 가지는 노드
간선/에지 : 트리와 노드를 연결하는 선
자식 형제 부모 조상 자손 사용
레벨 : 트리의 각층의 번호
높이 : 트리의 최대레벨
차수(degree) : 노드의 자식 노드수
일반트리(배열이용)
링크필드의 개수가 자식노드의수
단점 : 각 노드마다 배열의 길이가 다름
일반트리(연결리스트이용)
첫번째 링크는 자식노드를 가르키고
두번째노드는 형제노드를 가르킴
단점 : 복잡함
이진트리 : 모든 노드가 2개의 서브트리를 가짐
최대 2개의 자식노드만 존재할 수 있음
이진트리의 설정
노드개수n개 = 간선개수 n-1개
높이가 h = 최소h개~최대 2^h-1개의 노드 가짐
n개의 노드 => 이진트리 높이는 log2(n+1)이상 n이하
포화이진트리 : 트리의 각레벨에 노드가 가득차있는 이진트리
노드번호 : 레벨단위에서 왼쪽에서 오른쪽순서로 번호부여
완전이진트리 : 높이가 h일때 레벨1~h-1까지 노드가 모두 채워진경우 단, 마지막레벨은 가득차있지않아도되지만 중간에 비어있으면 안됨



